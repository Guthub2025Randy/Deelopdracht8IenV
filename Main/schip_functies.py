# -*- coding: utf-8 -*-
"""schip_functies_n.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/113A52ub1agy3nAValpof8xL2UkiPONII
"""

from bibliotheek import *

def funcPlotFill(x_plot, y_plot, x_naam, y_naam, titel_naam, functie_naam, kleur_functie):
    plt.figure(figsize=(30,20))
    plt.plot(x_plot, y_plot, label=f"{functie_naam}", color=f'{kleur_functie}')
    plt.fill_between(x_plot, y_plot, alpha=0.3, color=f'{kleur_functie}')
    plt.xlabel(f"{x_naam}")
    plt.ylabel(f"{y_naam}")
    plt.title(f"{titel_naam}")
    plt.legend()
    plt.grid(True)
    plt.show()
    plt.close()
    return None

def funcPlot(x_plot, y_plot, x_naam, y_naam, titel_naam, functie_naam, kleur_functie):
    plt.figure(figsize=(8,5))
    plt.plot(x_plot, y_plot, label=f"{functie_naam}", color=f'{kleur_functie}')
    plt.xlabel(f"{x_naam}")
    plt.ylabel(f"{y_naam}")
    plt.title(f"{titel_naam}")
    plt.legend()
    plt.grid(True)
    plt.show()
    plt.close()
    return None

def calcGarbageValues(item):
    mask = np.ones_like(item, dtype=bool)
    mask[:int(len(item)*0.1)] = False
    mask[int(len(item)*0.9):] = False
    return item[mask]

def interpolerenLocatie(dictionary_ballasttank, vulling_tank, tanknummer):
    """
    Deze functie bepaalt van het water een ballasttank het zwaartepunt. Als input neemt hij de dictionary waarin de zwaartepunten
    van de tank bij gegeven vullingen staat, de werkelijke vulling, en het tanknummer. Door interpolatie worden het zwaartepunt
    bepaald en teruggegeven als array.
    """
    vol_key = f"vol_{tanknummer}"
    lcg_key = f"lcg_{tanknummer}"
    tcg_key = f"tcg_{tanknummer}"
    vcg_key = f"vcg_{tanknummer}"
    TVolume = dictionary_ballasttank[vol_key]
    lcgT = dictionary_ballasttank[lcg_key]
    tcgT = dictionary_ballasttank[tcg_key]
    vcgT = dictionary_ballasttank[vcg_key]
    lcg_interpol = ip.interp1d(TVolume, lcgT, kind='cubic')
    tcg_interpol = ip.interp1d(TVolume, tcgT, kind='cubic')
    vcg_interpol = ip.interp1d(TVolume, vcgT, kind='cubic')
    lcg = lcg_interpol(vulling_tank)
    tcg = tcg_interpol(vulling_tank)
    vcg = vcg_interpol(vulling_tank)
    return np.array([lcg,tcg,vcg])

def calculateWeightKraan(krachten, posities, h, kraan_lcg, swlmax, weight_transition_pieces):
    """
    Deze functie heeft als doel aan twee lijsten, een met floats die krachten representeren, en aan een ander van arrays die
    elk een positie in het xyz vlak representeren, respectievelijk de zwaartekrachten en hun aangrijpingspunten toe te voegen.
    Ook het gewicht van de deklading (ZwaarteWindmolen) wordt toegevoegd. De aangevulde lijsten worden teruggegeven.
    """
    zwaarte_kheis = -swlmax
    array_positie_kheis = np.array([kraan_lcg, 8+(32.5*np.cos(np.deg2rad(60))), (h+1+(32.5*np.sin(np.deg2rad(60))))])
    zwaarte_kboom = -swlmax*0.17
    array_positie_kboom = np.array([kraan_lcg, 8+(0.5*32.5*np.cos(np.deg2rad(60))), (h+1+(0.5*32.5*np.sin(np.deg2rad(60))))])
    zwaarte_khuis = -swlmax*0.34
    array_positie_khuis = np.array([kraan_lcg, 8, h + 1])
    zwaarte_windmolen = -weight_transition_pieces
    array_positie_windmolen = np.array([32, -2, h + 10])
    posities.append(array_positie_kheis)
    krachten.append(zwaarte_kheis)
    posities.append(array_positie_kboom)
    krachten.append(zwaarte_kboom)
    posities.append(array_positie_khuis)
    krachten.append(zwaarte_khuis)
    posities.append(array_positie_windmolen)
    krachten.append(zwaarte_windmolen)
    return krachten, posities

def plotVerdeeldeBelasting(lengte_schip, csa, shell, ballast, tankwanden, spiegel, kraan, lading, verdeelde_belasting):
    plt.figure(figsize=(30,20))
    plt.title("Verdeelde belasting per onderdeel")
    plt.plot(lengte_schip, -csa, label="Opdrijvende kracht", color='darkblue', linewidth=0.7)
    plt.plot(lengte_schip, -shell, label="Huid", color='orange', linewidth=0.7)
    plt.plot(lengte_schip, -ballast, label="Ballastwater", color='green', linewidth=0.7)
    plt.plot(lengte_schip, -tankwanden, label="Tankwanden", color='brown', linewidth=0.7)
    plt.plot(lengte_schip, -spiegel, label="Spiegel", color='pink', linewidth=0.7)
    plt.plot(lengte_schip, -kraan, label="Kraan", color='grey', linewidth=0.7)
    plt.plot(lengte_schip, -lading, label="Transition pieces", color='lightblue', linewidth=0.7)
    plt.plot(lengte_schip, -verdeelde_belasting, label="Verdeelde belasting", color='cyan', linewidth=0.7)
    plt.xlabel("x [m]")
    plt.ylabel("Belasting [N]")
    plt.legend()
    plt.show()
    plt.close()
    return None

def plotApprovedValues(lengte_schip, q, dwarskracht, buigend_moment, neutrale_as, spanning, reduct_m, phi_accent, w_acc, phi, w, traag, csa, shell, ballast, tankwanden, spiegel, kraan, lading):
    lengte_zonder_randwaardes = calcGarbageValues(lengte_schip)
    funcPlotFill(lengte_zonder_randwaardes, traag, "Lengte van het schip (L) [m]", "Traagheidsmoment I [m4]", "Het traagheidsmoment I [m4] over de lengte van het schip L [m]", "Traagheidsmoment I [m4]", 'purple')
    funcPlotFill(lengte_schip, -q, "Lengte van het schip (L) in [m]", "Netto verdeelde belasting (q) in [N]", "De netto verdeelde belasting", 'Netto load',"black")
    plotVerdeeldeBelasting(lengte_schip, csa, shell, ballast, tankwanden, spiegel, kraan, lading, q)
    funcPlotFill(lengte_schip, dwarskracht, "Lengte van het schip L [m]", "Dwarskracht V(x) [N]", "De dwarskracht V(x) [N] over de lengte van het schip L [m]", "Dwarskracht V(x)", 'orange')
    funcPlotFill(lengte_schip, buigend_moment, "Lengte van het schip L [m]", "Buigend moment M(x) [Nm]", "Het buigend moment M(x) [Nm] over de lengte van het schip L [m]", "Buigend moment M(x)", 'yellow')
    funcPlotFill(lengte_zonder_randwaardes, reduct_m, "Lengte van het schip (L) in [m]", "Gereduceerde moment (M/(E*I)) in [Nm]", "Het gereduceerde moment", 'Gereduceerde moment', 'black')
    funcPlotFill(lengte_zonder_randwaardes, phi_accent, "Lengte van het schip L [m]", "φ(x)' [deg]", "De hoekverdraaiing in graden φ(x)' [deg] over de lengte van het schip L [m]", "De hoekverdraaiing φ(x)' [deg]", 'green')
    funcPlotFill(lengte_zonder_randwaardes, w_acc, "Lengte van het schip L [m]", "Doorbuiging w'(x) [m]", "Doorbuiging w'(x) [m] over de lengte van het schip L [m]", "Doorbuiging w'(x) [m]", 'brown')
    funcPlotFill(lengte_zonder_randwaardes, phi, "Lengte van het schip L [m]", "φ(x) [deg]", "Relatieve hoek in graden over de lengte van het schip", "Hoekverdraaiing φ(x) [deg]", "y")
    funcPlotFill(calcGarbageValues(lengte_zonder_randwaardes), calcGarbageValues(w), "Lengte van het schip L [m]", "Relatieve Doorbuiging w(x) [m]", "De relatieve doorbuiging over de lengte van het schip", "Doorbuiging w(x) [m]", "b")
    funcPlotFill(lengte_zonder_randwaardes, spanning, "Lengte van het schip L [m]", "Buigspanning B(x) [Pa]", "De buigspanningslijn over de scheepslengte", "Resultaat", 'gold')
    return None

def mainValuesAssign(d1, d2, d3, dbh1, dbh2, dbh, msp, dha, dic_shell_csa, dic_csa_tank1, dic_csa_tank2, dic_csa_tank3, resistance, bouyant_csa, positie_kraan, lcg_tp, cg_tp_totaal, dic_input, tcg_tp_lijst, vcg_tp_lijst):
    cob = msp["COB [m]"]
    h = float(msp["H [m]"])
    bouyant_volume = float(msp["Buoyant Volume [m3]"])
    length_schip = float(msp["Loa  [m]"])
    it = float(msp["Inertia WPA around COF [m4]"][0])
    l_shell = dic_shell_csa["X [m]"]
    i_x_shell = dic_shell_csa["INERTIA_X[m4]"]
    entrance_angle = float(msp["Waterline Entrace angle (WEA) [deg]"])
    tussenstappen_lengte = dic_shell_csa["CENTROID_X[m]"]
    hoogte_neutrale_as = dic_shell_csa["CENTROID_Z[m]"]
    hoogte_kiel = dic_shell_csa["Z_Keel[m]"]
    lcgs_tp = lcg_tp
    transition_piece_amount = len(lcgs_tp)
    lengte_cm = np.linspace(l_shell[0], l_shell[-1], int(((l_shell[-1] - l_shell[0]) * 100) + 1))
    transom_bhd_thickness = 0.01 # m
    rest_thickness = int(dic_input["mean shell thickness [mm]"]) / 1000 # m
    straal_kraanhuis = 2
    print("De weerstand op 14 knopen is:")
    r_14knp = resistance.loc[8, '  Rtot [N]']
    print(r_14knp)
    kraan_lcg = float(positie_kraan[0])
    kraan_tcg = float(positie_kraan[1])
    kraan_vcg = float(positie_kraan[2])
    weight_transition_piece = 5395500
    swlmax = (weight_transition_piece)/0.94
    weight_kraan_heisgerei = -swlmax
    weight_kraan_boom = -swlmax*0.17
    weight_kraan_huis = -swlmax*0.34
    weight_transition_pieces = weight_transition_piece*transition_piece_amount
    weight_kraan_totaal = weight_kraan_heisgerei + weight_kraan_huis + weight_kraan_boom 
    straal_tp = 4
    lcg_tp = cg_tp_totaal[0]
    tcg_tp = cg_tp_totaal[1]
    vcg_tp = cg_tp_totaal[2] + 10
    lengte_kraan_fundatie = 4
    draaihoogte_kraan = 1
    jib_length = 32.5
    zwenkhoek = 90
    giekhoek = 60
    lcg_kraanhuis = kraan_lcg
    tcg_kraanhuis = kraan_tcg
    vcg_kraanhuis = h + 1
    lcg_kraanboom = kraan_lcg
    tcg_kraanboom = kraan_tcg + (0.5 * jib_length * np.cos(np.deg2rad(giekhoek)))
    vcg_kraanboom = (h + 1 + (0.5 * jib_length * np.sin(np.deg2rad(giekhoek))))
    lcg_heisgerei = kraan_lcg
    tcg_heisgerei = kraan_tcg + (jib_length * np.cos(np.deg2rad(giekhoek)))
    vcg_heisgerei = (h + 1 + (jib_length * np.sin(np.deg2rad(giekhoek))))
    weights_tp = np.array([weight_transition_piece, weight_transition_piece, weight_transition_piece, weight_transition_piece])
    return cob, h, bouyant_volume, length_schip, it, l_shell, i_x_shell, entrance_angle, tussenstappen_lengte, hoogte_neutrale_as, hoogte_kiel, lcgs_tp, lengte_cm, transom_bhd_thickness, rest_thickness, straal_kraanhuis, r_14knp, kraan_lcg, kraan_tcg, kraan_vcg, weight_transition_piece, transition_piece_amount, swlmax, weight_kraan_heisgerei, weight_kraan_boom, weight_kraan_huis, weight_transition_pieces, weight_kraan_totaal, straal_tp, lcg_tp, tcg_tp, vcg_tp, lengte_kraan_fundatie, draaihoogte_kraan, jib_length, zwenkhoek, giekhoek, lcg_kraanhuis, tcg_kraanhuis, vcg_kraanhuis, lcg_kraanboom, tcg_kraanboom, vcg_kraanboom, lcg_heisgerei, tcg_heisgerei, vcg_heisgerei, weights_tp
