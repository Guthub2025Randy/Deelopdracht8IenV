# -*- coding: utf-8 -*-
"""schip_functies_n.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/113A52ub1agy3nAValpof8xL2UkiPONII
"""

from bibliotheek import *

def funcPlotFill(x_plot, y_plot, x_naam, y_naam, titel_naam, functie_naam, kleur_functie):
    plt.figure(figsize=(30,20))
    plt.plot(x_plot, y_plot, label=f"{functie_naam}", color=f'{kleur_functie}')
    plt.fill_between(x_plot, y_plot, alpha=0.3, color=f'{kleur_functie}')
    plt.xlabel(f"{x_naam}")
    plt.ylabel(f"{y_naam}")
    plt.title(f"{titel_naam}")
    plt.legend()
    plt.grid(True)
    plt.show()
    plt.close()
    return None

def funcPlot(x_plot, y_plot, x_naam, y_naam, titel_naam, functie_naam, kleur_functie):
    plt.figure(figsize=(8,5))
    plt.plot(x_plot, y_plot, label=f"{functie_naam}", color=f'{kleur_functie}')
    plt.xlabel(f"{x_naam}")
    plt.ylabel(f"{y_naam}")
    plt.title(f"{titel_naam}")
    plt.legend()
    plt.grid(True)
    plt.show()
    plt.close()
    return None

def calcGarbageValues(item):
    mask = np.ones_like(item, dtype=bool)
    mask[:int(len(item)*0.1)] = False
    mask[int(len(item)*0.9):] = False
    return item[mask]

def interpolerenLocatie(dictionary_ballasttank, vulling_tank, tanknummer):
    """
    Deze functie bepaalt van het water een ballasttank het zwaartepunt. Als input neemt hij de dictionary waarin de zwaartepunten
    van de tank bij gegeven vullingen staat, de werkelijke vulling, en het tanknummer. Door interpolatie worden het zwaartepunt
    bepaald en teruggegeven als array.
    """
    vol_key = f"vol_{tanknummer}"
    lcg_key = f"lcg_{tanknummer}"
    tcg_key = f"tcg_{tanknummer}"
    vcg_key = f"vcg_{tanknummer}"
    TVolume = dictionary_ballasttank[vol_key]
    lcgT = dictionary_ballasttank[lcg_key]
    tcgT = dictionary_ballasttank[tcg_key]
    vcgT = dictionary_ballasttank[vcg_key]
    lcg_interpol = ip.interp1d(TVolume, lcgT, kind='cubic')
    tcg_interpol = ip.interp1d(TVolume, tcgT, kind='cubic')
    vcg_interpol = ip.interp1d(TVolume, vcgT, kind='cubic')
    lcg = lcg_interpol(vulling_tank)
    tcg = tcg_interpol(vulling_tank)
    vcg = vcg_interpol(vulling_tank)
    return np.array([lcg,tcg,vcg])

def calculateWeightKraan(krachten, posities, h, kraan_lcg, swlmax, weight_transition_pieces):
    """
    Deze functie heeft als doel aan twee lijsten, een met floats die krachten representeren, en aan een ander van arrays die
    elk een positie in het xyz vlak representeren, respectievelijk de zwaartekrachten en hun aangrijpingspunten toe te voegen.
    Ook het gewicht van de deklading (ZwaarteWindmolen) wordt toegevoegd. De aangevulde lijsten worden teruggegeven.
    """
    zwaarte_kheis = -swlmax
    array_positie_kheis = np.array([kraan_lcg, 8+(32.5*np.cos(np.deg2rad(60))), (h+1+(32.5*np.sin(np.deg2rad(60))))])
    zwaarte_kboom = -swlmax*0.17
    array_positie_kboom = np.array([kraan_lcg, 8+(0.5*32.5*np.cos(np.deg2rad(60))), (h+1+(0.5*32.5*np.sin(np.deg2rad(60))))])
    zwaarte_khuis = -swlmax*0.34
    array_positie_khuis = np.array([kraan_lcg, 8, h + 1])
    zwaarte_windmolen = -weight_transition_pieces
    array_positie_windmolen = np.array([32, -2, h + 10])
    posities.append(array_positie_kheis)
    krachten.append(zwaarte_kheis)
    posities.append(array_positie_kboom)
    krachten.append(zwaarte_kboom)
    posities.append(array_positie_khuis)
    krachten.append(zwaarte_khuis)
    posities.append(array_positie_windmolen)
    krachten.append(zwaarte_windmolen)
    return krachten, posities


def plotApprovedValues(lengte_schip, q, dwarskracht, buigend_moment, neutrale_as, spanning, reduct_m, phi_accent, w_acc, phi, w, traag):
    # Niet nodige plots achter de hashtags
    # funcPlotFill(lengte_schip, Neerwaartse_kracht_cm, "Lengte van het schip (L) [m]", "Neerwaartse kracht (Ballast) [N]", "De verdeelde belasting van het ballastwater over de lengte van het schip", "Ballast belasting [N]", 'r')
    # funcPlotFill(lengte_schip, -opwaartse_kracht_cm, "Lengte van het schip (L) [m]", "Opwaartse kracht (p) in [N]", "De opwaartse kracht (p) in [N] over de lengte van het schip (L) [m]", "Opwaartse kracht (p) in [N]", 'b')
    lengte_zonder_randwaardes = calcGarbageValues(lengte_schip)
    funcPlotFill(lengte_zonder_randwaardes, traag, "Lengte van het schip (L) [m]", "Traagheidsmoment I [m4]", "Het traagheidsmoment I [m4] over de lengte van het schip L [m]", "Traagheidsmoment I [m4]", 'purple')
    funcPlotFill(lengte_schip, -q, "Lengte van het schip (L) in [m]", "Netto verdeelde belasting (q) in [N]", "De netto verdeelde belasting", 'Netto load',"black")
    funcPlotFill(lengte_schip, dwarskracht, "Lengte van het schip L [m]", "Dwarskracht V(x) [N]", "De dwarskracht V(x) [N] over de lengte van het schip L [m]", "Dwarskracht V(x)", 'orange')
    funcPlotFill(lengte_schip, buigend_moment, "Lengte van het schip L [m]", "Buigend moment M(x) [Nm]", "Het buigend moment M(x) [Nm] over de lengte van het schip L [m]", "Buigend moment M(x)", 'yellow')
    funcPlotFill(lengte_zonder_randwaardes, reduct_m, "Lengte van het schip (L) in [m]", "Gereduceerde moment (M/(E*I)) in [Nm]", "Het gereduceerde moment", 'Gereduceerde moment', 'black')
    funcPlotFill(lengte_zonder_randwaardes, phi_accent, "Lengte van het schip L [m]", "φ(x)' [deg]", "De hoekverdraaiing in graden φ(x)' [deg] over de lengte van het schip L [m]", "De hoekverdraaiing φ(x)' [deg]", 'green')
    funcPlotFill(lengte_zonder_randwaardes, w_acc, "Lengte van het schip L [m]", "Doorbuiging w'(x) [m]", "Doorbuiging w'(x) [m] over de lengte van het schip L [m]", "Doorbuiging w'(x) [m]", 'brown')
    funcPlotFill(lengte_zonder_randwaardes, phi, "Lengte van het schip L [m]", "φ(x) [deg]", "Relatieve hoek in graden over de lengte van het schip", "Hoekverdraaiing φ(x) [deg]", "y")
    funcPlotFill(lengte_zonder_randwaardes, w, "Lengte van het schip L [m]", "Relatieve Doorbuiging w(x) [m]", "De relatieve doorbuiging over de lengte van het schip", "Doorbuiging w(x) [m]", "b")
    funcPlotFill(lengte_zonder_randwaardes, spanning, "Lengte van het schip L [m]", "Buigspanning B(x) [Pa]", "De buigspanningslijn over de scheepslengte", "Resultaat", 'gold')
    return None