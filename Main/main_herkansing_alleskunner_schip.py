# -*- coding: utf-8 -*-
"""
Created on Wed May 14 16:31:12 2025

@author: CWMaz
"""

# -*- coding: utf-8 -*-
"""main_functie_n.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lW_Rbh4Vg4WO8VRZGbDbs0z4qzZ_RaCS
"""

from bibliotheek import *
from schip_functies import *
from sterkteMain import *
from stabiliteitsMain import *
from importGrasshopperFiles import *
import matplotlib.pyplot as plt
import numpy as np

versienummers = np.array([1,2,3,4,5])

def main(versienummers):
    for i in versienummers:
        versienummer = i
        print(f"Dit is versie {i}")
        #stabiliteitsmain hier. Die geeft terug; tankvullingen, weerstand, gm, lcg van tank 2
        d1, d2, d3, dbh1, dbh2, dbh, msp, dha, dic_shell_csa, dic_csa_tank1, dic_csa_tank2, dic_csa_tank3, resistance, bouyant_csa, positie_kraan, posities_tp = importGrasshopperFiles(versienummer)
        cob = msp["COB [m]"]
        h = float(msp["H [m]"])
        bouyant_volume = float(msp["Buoyant Volume [m3]"])
        length_schip = float(msp["Loa  [m]"])
        it = float(msp["Inertia WPA around COF [m4]"][0])
        l_shell = dic_shell_csa["X [m]"]
        i_x_shell = dic_shell_csa["INERTIA_X[m4]"]
        entrance_angle = float(msp["Waterline Entrace angle (WEA) [deg]"])
        tussenstappen_lengte = dic_shell_csa["CENTROID_X[m]"]
        hoogte_neutrale_as = dic_shell_csa["CENTROID_Z[m]"]
        hoogte_kiel = dic_shell_csa["Z_Keel[m]"] # , tussenstappen_lengte, hoogte_neutrale_as, hoogte_kiel
        lcg_TP = np.array([32,32,28,36])
        lengte_cm = np.linspace(l_shell[0], l_shell[-1], int(((l_shell[-1] - l_shell[0]) * 100) + 1))
        transom_bhd_thickness = 0.01 # m
        rest_thickness = 0.012 # m
        straal_kraanhuis = 2
        print("De weerstand op 14 knopen is:")
        r_14knp = resistance.loc[8, '  Rtot [N]'] 
        print(r_14knp)
        kraan_lcg = positie_kraan[0]
        kraan_tcg = positie_kraan[1]
        kraan_vcg = positie_kraan[2]
        weight_transition_piece = 5395500
        transition_piece_amount = 4 # importeren
        swlmax = (weight_transition_piece)/0.94
        weight_kraan_heisgerei = -swlmax
        weight_kraan_boom = -swlmax*0.17
        weight_kraan_huis = -swlmax*0.34
        weight_transition_pieces = weight_transition_piece*transition_piece_amount
        weight_kraan_totaal = weight_kraan_heisgerei + weight_kraan_huis + weight_kraan_boom 
        straal_tp = 4
        lcg_tp = 32
        tcg_tp = -2
        vcg_tp = h+10
        lengte_kraan_fundatie = 4
        draaihoogte_kraan = 1
        jib_length = 32.5
        zwenkhoek = 90
        giekhoek = 60
        lcg_kraanhuis = kraan_lcg
        tcg_kraanhuis = kraan_tcg
        vcg_kraanhuis = h+1
        lcg_kraanboom = kraan_lcg
        tcg_kraanboom = kraan_tcg+(0.5*jib_length*np.cos(np.deg2rad(giekhoek)))
        vcg_kraanboom = (h+1+(0.5*jib_length*np.sin(np.deg2rad(giekhoek))))
        lcg_heisgerei = kraan_lcg
        tcg_heisgerei = kraan_tcg+(jib_length*np.cos(np.deg2rad(giekhoek)))
        vcg_heisgerei = (h+1+(jib_length*np.sin(np.deg2rad(giekhoek))))
        weights_tp = np.array([weight_transition_piece, weight_transition_piece, weight_transition_piece, weight_transition_piece])
        G_M = stabilitietsMain(versienummer, transom_bhd_thickness, rest_thickness, kraan_lcg, d1, d2, d3, dbh1, dbh2, dbh, msp, dha, dic_shell_csa, dic_csa_tank1, dic_csa_tank2, dic_csa_tank3, cob, h, bouyant_volume, swlmax, weight_transition_pieces, it, entrance_angle, r_14knp, weight_transition_piece, lcg_tp, tcg_tp, vcg_tp, lengte_kraan_fundatie, draaihoogte_kraan, zwenkhoek, giekhoek, jib_length, lcg_kraanhuis, tcg_kraanhuis, vcg_kraanhuis, lcg_kraanboom, tcg_kraanboom, vcg_kraanboom, lcg_heisgerei, tcg_heisgerei, vcg_heisgerei)
        if G_M > 1:
            maximum_sterkte, q, dwars_kracht, buigend_moment, neutrale_as, spanning, reduct_m, phi_accent, w_acc, phi, w, traag = sterkteMain(d1, d2, d3, dbh1, dbh2, dbh, msp, dha, dic_shell_csa, dic_csa_tank1, dic_csa_tank2, dic_csa_tank3, cob, h, bouyant_volume, length_schip, it, l_shell, i_x_shell, bouyant_csa, lcg_TP, lengte_cm, straal_tp, rest_thickness, transom_bhd_thickness, kraan_lcg, swlmax, straal_kraanhuis, weight_kraan_totaal, weights_tp, tussenstappen_lengte, hoogte_neutrale_as, hoogte_kiel)
            while maximum_sterkte > VLOEIGRENS:
                rest_thickness += 0.001
                maximum_sterkte, q, dwars_kracht, buigend_moment, neutrale_as, spanning, reduct_m, phi_accent, w_acc, phi, w, traag = sterkteMain(d1, d2, d3, dbh1, dbh2, dbh, msp, dha, dic_shell_csa, dic_csa_tank1, dic_csa_tank2, dic_csa_tank3, cob, h, bouyant_volume, length_schip, it, l_shell, i_x_shell, bouyant_csa, lcg_TP, lengte_cm, straal_tp, rest_thickness, transom_bhd_thickness, kraan_lcg, swlmax, straal_kraanhuis, weight_kraan_totaal, weights_tp, tussenstappen_lengte, hoogte_neutrale_as, hoogte_kiel)
            print("De maximaal bereikte spanning en de bijbehorende plaatdikte:")
            print(maximum_sterkte)
            print(rest_thickness)
            plotApprovedValues(lengte_cm, q, dwars_kracht, buigend_moment, neutrale_as, spanning, reduct_m, phi_accent, w_acc, phi, w, traag)
        else:
            print("G_M voldoet niet")
            return None
    return None

main(versienummers)

# haha 